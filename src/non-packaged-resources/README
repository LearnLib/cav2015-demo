****************************************************************************
*                                                                          *
*  The Open-Source LearnLib: A Framework for Active Automata Learning      *
*                                                                          *
****************************************************************************

Contents
============================================================================
1. Overview
2. Installation
3. Visual Demo 
4. Performance Evaluation
5. Source Demos
6. Pointers to more Documentation 

1. Overview
============================================================================

LearnLib is a library for active automata learning algorithms. The current
version is written in Java and available as open source software under the 
LGPLv3 license. The CAV tool paper gives a short overview of some of the more
recent work we have done on LearnLib for the open source release, and names
a number of recent works that use LearnLib. The paper also contains a 
proposal for a live demo as an appendix.

The reviewers requested data to back up claims we made about the performance
of LearnLib. So for the rebuttal we made this data available online and promised
to make it part of the paper for the final version. There is no final version
yet - we have included some performance results as a second appendix to the 
paper for this artifact evaluation. The artifact we submit contains three 
things:

1. The tool that is presented in the proposal for a live demo. This tool lets
   a user interact with a learning algorithm and shows the the internal data 
   structures as well as the produced models. We found that this kind of tool
   is very helpful when teaching automata learning to students. The demo 
   is described in Section 3. 

2. Scripts and programs that were used to produce the performance data. 
   In the paper we make claims about the performance of the new version of 
   LearnLib and compare it to other implementations of active automata learning
   (namely libalf and the old (closed-source) version of LearnLib). We performed
   experiments that are the basis for these claims. In Section 4 we describe 
   how the performance evaluation was set up and can be run.

3. A demo project that shows how to use LearnLib in your own project. LearnLib
   is a library and we are interested in growing an active user base. We aim 
   at making it easy to use the different algorithms and optimizations provided
   by LearnLib. We briefly describe the demo project in Section 5.

 Finally, Section 6 contains pointers to more documentation.


2. Installation
============================================================================

2.1 Prerequisites
---------------------
You can skip this section if you are using the VM image.

- Java 8:
    LearnLib is a library written in Java. The demo requires a Java 8 Runtime
    Environment (JRE) to run, e.g., Oracle's (http://java.oracle.com/) or
    OpenJDK (http://openjdk.java.net/).
- GraphVIZ:
    LearnLib relies on the AT&T GraphVIZ tool (http://www.graphviz.org/) for
    rendering graphs and automata. Also, the 'dot' binary should be in a
    directory contained in the PATH environment variable (if for whatever
    reasons this can't be done, the 'learnlib.properties' file contains
    instructions on how to set an alternative path for the 'dot' program).
- Gnuplot:
    We use Gnuplot (http://www.gnuplot.info/) for plotting data for performance
    evaluation. More precisely, our tool will only generate raw data files,
    which can be transformed into SVG plots using Gnuplot.
- Apache Maven (source demo only):
    LearnLib uses Apache Maven (http://maven.apache.org/) for its build
    management, and we believe that using Maven is the most convenient way of
    writing applications that use LearnLib. Maven will need to be installed
    to trigger builds from the command line, however, many Java IDEs such as
    Eclipse (http://www.eclipse.org/) come equipped with a standalone version
    of Maven. 

2.2 Contents Overview
---------------------
This distribution contains the following files and directories:
- automata/
    This folder contains automata (TAF files) that can be used for the visual
    demo (cf. next section). They are represented in a very easily
    comprehensible textual format. The file 'coffee-machine.taf' contains a
    detailed documentation of all the possible elements, so you can create
    and learn your own automata.
- bin/
    This folder contains various tools and scripts to work with LearnLib. The
    script `taf2dot` allows converting a TAF file into a GraphVIZ DOT file.
    The script `tafview` renders and displays an automaton stored as a TAF
    file (GraphVIZ required). All other scripts are explained in the subsequent
    sections.
- gnuplot-scripts/
    This folder contains scripts for Gnuplot to create the performance plots
    (cf. Section 4).
- lib/
    This folder contains the libraries used by the demonstration tool.
- rebuttal/
    This folder contains the performance data we made available to the reviewers
    during the rebuttal, to back the performance claims we made in the paper.
    Use the file `performance.html` as a starting point. This data can also be
    found online, under `http://learnlib.de/features/performance`. 
- CAV_2015_submission_212.pdf
    The LearnLib paper, as submitted to CAV.
- learnlib-cav2015.jar
    The main JAR file containing the tool logic. Do not execute this JAR file
    directly, always use the scripts in the bin/ directory.
- learnlib.properties
    Miscellaneous settings for the tools contained in this package. See the
    file itself for a documented list of options.
- README
    This file.

2.3 Compiling from Source
-------------------------
This section is for interested readers only. It assumes that you have Maven
and git (http://git-scm.com/) installed, and are using a Unix-like operating
system.

The LearnLib Demo can also be compiled from its source. For this, execute the
following steps in the command line:

   git clone https://github.com/LearnLib/cav2015-demo.git
   cd cav2015-demo
   mvn package

The directory `target/learnlib-cav2015` should then contain all of the files and
directories contained in the above subsection.


3. Visual Demo
============================================================================

The LearnViz tool contained in the bin folder (`./bin/learnviz`) allows
visualizing the process of learning an automaton. It relies on the GraphVIZ
DOT tool for visualizing automata, and displays them in a web browser.
Screenshots from using LearnViz are shown in the Appendix of our conference
submission. LearnViz has been used successfully at a LearnLib tutorial at
ISoLA 2014.

The visual demo can be run as follows:
   ./bin/learnviz [<options ...>] <taf-file>

<taf-file> is the target automaton to be learned. You can use one of the
supplied files contained in the `automata/` folder, or define your own 
automaton (see `coffee-machine.taf` for a reference).

<options> can be any of:

-a <algo>, -algo <algo>
  Specifies the learning algorithm to be used. Possible values are `lstar`
  (default), `rs` (Rivest&Schapire's algorithm), `dt` (Discrimination Tree
  algorithm), `ttt` (TTT Algorithm).

-i, -interactive
  Enables interactive mode. In interactive mode, the user is requested to
  enter counterexamples manually. If interactive mode is turned off (default),
  counterexamples are automatically generated (and displayed).

After starting, a message will pop up and inform the user that progress updates
will be displayed in the browser. After clicking 'OK', the learning process
starts, keeping the user informed about the current progress and, if the
interactive mode was enabled, requesting them to enter counterexamples.


4. Performance Evaluation
============================================================================

The submitted paper itslef does not contain concrete performance results.
This was criticized by the reviewers. We thus made performance results
available to the reviewers and promised to include data in the final version. 
We include a section of our rebuttal for your reference:

=== BEGIN

Performance Evaluation (reviews #2, #3): We had performed experiments 
which were the basis of our claims. In the meantime we have made the 
results available on the web page of LearnLib [1]. While we originally 
wanted to emphasize only the architecture, design, and features in the 
paper, the reviewers made a good point in that the performance is a very 
important metric for potential users. We will thus include some key results 
in the in the final version: We have compared LearnLib to LibAlf as well as 
the former, closed-source version. We could not compare to AIDE (the project 
would not build on a UNIX system using Mono). The comparison shows that for 
moderately-sized systems and comparable algorithms, the open-source LearnLib 
offers a speedup of at least one order of magnitude.

[1]: http://learnlib.de/features/performance

=== END

The artifact contains the data we made available to the reviewers and the
scripts that produce this data (see 2.2, or folder 'rebuttal/') to back 
up the claims from the paper and the rebuttal.

For evaluating the performance in comparison with other active automata
learning libraries (we chose the old version of LearnLib, here called JLearn,
and the LibAlf framework), we have written small programs that run the
frameworks on some examples, and gather runtime data to be plotted with
Gnuplot (using scripts we also provide).

For the first experiments, we randomly generated automata of growing size over
certain alphabet sizes. This allows us to plot the running time as a function
of the target size. How to run these experiments is described in the next
subsection.

For the second experiments, we ran comparable algorithms from both frameworks
on selected example automata. This allows us to directly compare all algorithms
in a bar chart. How to run these experiments is described in Section 4.2.


4.1 Series of Randomly Generated Automata of Growing Size
---------------------------------------------------------

The performance evaluation tools for a series of randomly generated automata
can be run as follows:

   ./bin/jlearn-randseries [<options ...>] <output-dir>
   ./bin/libalf-randseries [<options ...>] <output-dir>

<output-dir> is the directory in which the result data (.dat files) will be
stored.

<options> can be any of:

-l <num>, -lower <num>
  Specifies the lower bound (inclusive) on the number of states in the
  series of generated automata. The default is 10.
-u <num>, -upper <num>
  Specifies the upper bound (exclusive) on the number of states in the
  series. The default is 1000.
-s <num>, -step <num>
  Specifies the state count stepping in the series. The default is 10.
-k <sizes>, -alphabet-sizes <sizes>
  Specifies the alphabet sizes for which to run the experiment series
  independently, as a comma-separated list. The default is '2,10,100'.

Running `...-randseries` scripts can take time, up to an hour or even more
in some cases. For quicker results, decrease the upper bound and use less
different alphabet sizes (and smaller alphabets). The commands
   ./bin/jlearn-randseries -u 500 -k 2 <output-dir>
   ./bin/libalf-randseries -u 500 -k 2 <output-dir>
should usually finish within a couple of minutes each.

After running, data files will have been stored in the specified output
directory. They can be converted into plots in the following way (assuming
that the output directory was called `results-jlearn-randseries`, and that
the script was invoked from the root of the distribution):

   cd results-jlearn-randseries/
   gnuplot ../gnuplot-scripts/plot-jlearn-randseries.gpl

For plotting the results from the `libalf-randseries` script, the Gnuplot script
`plot-libalf-randseries.gpl` can be used.


4.2 Direct Comparison on Selected Examples
---------------------------------------------------------

The performance evaluation tools for selected examples can be run as follows:

   ./bin/jlearn-examples [<options ...>] <output-dir>
   ./bin/libalf-examples [<options ...>] <output-dir>

<output-dir> is the directory in which the result data (.dat files) will be
stored.

<options> can be any of:

-n <num>, -repeat <num>
  Specifies how often a single example is repeatedly learned, to lessen
  the impact of outlier runs.

The `...-examples` scripts should usually finish with 20-40 minutes each.
For quicker results, reduce the repeat count. The commands
   ./bin/jlearn-examples -n 1 <output-dir>
   ./bin/libalf-examples -n 1 <output-dir>
should usually finish within a handful of minutes each.

After running, data files will have been stored in the specified output
directory. They can be converted into plots in the following way (assuming
that the output directory was called `results-jlearn-examples`, and that
the script was invoked from the root of the distribution):

   cd results-jlearn-examples/
   gnuplot ../gnuplot-scripts/plot-jlearn-examples.gpl

For plotting the results from the `libalf-examples` script, the Gnuplot script
`plot-libalf-examples.gpl` can be used.


5. Source Demos
============================================================================

We provide a small maven-project with three coding examples that show 
LearnLib is invoked from a user's project. The example project can be 
found in folder '[TODO]'. Sources are in the 'src/' folder. 

In the VM we included the Ecipse IDE for Java for studying and executing 
the examples. The project is already imported in Eclipse for your convenience.
If you have downoaded the ZIP-file, you need to install Eclipse in order 
to run the examples (you can still look at the code with a simple text 
editor though). In case you install Eclipse, you can import the examples
via

   - file > import > existing maven project.
   - select folder [TODO]

Example 1:
----------
File: de/learnlib/example/cav2015/coffee/Example1.java

The example shows how a model of a simulated system (i.e., an automaton) 
can be inferred while collecting some statistics. A detailed description is 
provided in the source code comments. The example can be executed via 
the context menu (Run as [TODO]).

Example 2:
----------
File: de/learnlib/example/cav2015/coffee/Example2.java

This example is a variation of the first example. We infer the same model. 
Only this time we do not have to write the the code for learning the system.
We simply use the 'Experiment' class, which is provided by LearnLib.
The example can be executed via the context menu (Run as [TODO]).

Example 3:
----------
File: de/learnlib/example/cav2015/stack/Example3.java

In this final example, we infer a model of an actual Java class. LearnLib
provides some facilities for inferring models of Java classes. The example
shows that it only takes a few lines of code to connect a learning algorithm
to a class. The example can be executed via the context menu (Run as [TODO]).


6. Pointers to more Documentation
============================================================================

* LearnLib homepage
  http://www.learnlib.de

* LearnLib sources
  https://github.com/LearnLib

* Performance data produced by the included scripts
  http://learnlib.de/features/performance/

* API Docs
  http://learnlib.github.io/learnlib/maven-site/latest-release/apidocs/

* LearnLib wiki (has a small example showing a basic setup, as well as 
  pointer to documentation on Maven)
  https://github.com/LearnLib/learnlib/wiki

* An introduction to active automata learning 
  http://learnlib.de/wp-content/uploads/2013/05/introduction-to-automata-learning-sfm2011.pdf 
 








